#!/usr/bin/env python3
"""
    pydoce

    Open the definition of a python obect in an editor

    Usage:
        pydoce [-23] path.to.object

    Examples:
        pydoce os.path.isdir
        pydoce django.core.files.File

    Copyright (c) 2014, Phillip Berndt
    License: BSD-License

"""
from __future__ import print_function

import importlib
import inspect
import os
import sys
import traceback

# Select editor to use
editor = os.environ["EDITOR"] if "EDITOR" in os.environ else "vim"
if editor == "vim" and "DISPLAY" in os.environ:
    editor = "gvim"

# Python 2/3 support
if len(sys.argv) > 1 and sys.argv[1] in ("-2", "-3"):
    desired_version = int(sys.argv[1][1])
    if sys.version_info.major != desired_version:
        os.execvp("python%d" % desired_version, ["python%d" % desired_version, sys.argv[0],] + sys.argv[1:])
    sys.argv = [sys.argv[0]] + sys.argv[2:]

# Show a short help
if len(sys.argv) != 2:
    print(__doc__, file=sys.stderr)
    sys.exit(0)

# Split path argument into module and local part For example, in os.path.isdir,
# os.path is a module and isdir is local to that module
imp_part = sys.argv[1].split(".")
loc_part = []

mod = None
while imp_part:
    try:
        imp_name = ".".join(imp_part)
        mod = importlib.import_module(imp_name)
    except ImportError as e:
        if e.message[-len(imp_part[-1]):] == imp_part[-1] or e.message[-len(imp_name)] == imp_name:
            loc_part.insert(0, imp_part.pop())
            continue
        fallback_file = sys.exc_traceback.tb_next.tb_next.tb_frame.f_code.co_filename
        fallback_line = sys.exc_traceback.tb_next.tb_next.tb_frame.f_lineno
        print("\033[31mImporting %s worked, but threw an exception:\n\033[0m" % imp_name, file=sys.stderr)
        traceback.print_exc()
        print("", file=sys.stderr)
    except Exception as e:
        fallback_file = sys.exc_traceback.tb_next.tb_next.tb_frame.f_code.co_filename
        fallback_line = sys.exc_traceback.tb_next.tb_next.tb_frame.f_lineno
        print("\033[31mImporting %s worked, but threw an exception:\n\033[0m" % imp_name, file=sys.stderr)
        traceback.print_exc()
        print("", file=sys.stderr)
        break
    else:
        break

if not mod and not fallback_file:
    print("Module %s not found" % sys.argv[1], file=sys.stderr)
    sys.exit(1)

if mod:
    # The module has been loaded above, now determine the local part. This is
    # required because a module might itself only import the desired symbol, and we
    # want to show the user that symbol's definition, not the import
    obj = mod

    while loc_part:
        obj = getattr(obj, loc_part.pop(0))

    # Use the inspect module to determine file/line of defition
    file = inspect.getsourcefile(obj)
    _, line = inspect.getsourcelines(obj)
else:
    print("\033[33mAs a fallback, opening the file that raised the exception\033[0m", file=sys.stderr)
    file, line = fallback_file, fallback_line

# Some editors might support to jump to a line directly
params = []
if "vi" in editor or "emacs" in editor:
    params.append("+%d" % line)

# Invoke editor
os.execvp(editor, [ editor, file ] + params)
