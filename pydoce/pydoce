#!/usr/bin/env python
"""
    pydoce

    Open the definition of a python obect in an editor

    Usage:
        pydoce path.to.object

    Examples:
        pydoce os.path.isdir
        pydoce django.core.files.File

    Copyright (c) 2014, Phillip Berndt
    License: BSD-License

"""
import inspect
import importlib
import os
import sys

# Select editor to use
editor = os.environ["EDITOR"] if "EDITOR" in os.environ else "vim"
if editor == "vim" and "DISPLAY" in os.environ:
    editor = "gvim"

# Show a short help
if len(sys.argv) != 2:
    print >> sys.stderr, __doc__
    sys.exit(0)

# Split path argument into module and local part For example, in os.path.isdir,
# os.path is a module and isdir is local to that module
imp_part = sys.argv[1].split(".")
loc_part = []

mod = None
while imp_part:
    try:
        imp_name = ".".join(imp_part)
        mod = importlib.import_module(imp_name)
    except ImportError, e:
        if e.message[-len(imp_part[-1]):] == imp_part[-1] or e.message[-len(imp_name)] == imp_name:
            loc_part.insert(0, imp_part.pop())
            continue
        print >> sys.stderr, "\033[31mImporting %s worked, but threw an exception:\n\033[0m" % imp_name
        raise
    except:
        print >> sys.stderr, "\033[31mImporting %s worked, but threw an exception:\n\033[0m" % imp_name
        raise
    else:
        break
if not mod:
    print "Module %s not found" % sys.argv[1]
    sys.exit(1)

# The module has been loaded above, now determine the local part. This is
# required because a module might itself only import the desired symbol, and we
# want to show the user that symbol's definition, not the import
obj = mod

while loc_part:
    obj = getattr(obj, loc_part.pop(0))

# Use the inspect module to determine file/line of defition
file = inspect.getsourcefile(obj)
_, line = inspect.getsourcelines(obj)

# Some editors might support to jump to a line directly
params = []
if "vi" in editor or "emacs" in editor:
    params.append("+%d" % line)

# Invoke editor
os.execvp(editor, [ editor, file ] + params)
