#!/usr/bin/env python
# vim:fileencoding=utf8
#
# Choose as many images from the ~/.bg folder as there are screens, properly
# scale them to fit them and set them as the cinnamon background image.
#
#

import PIL.Image
import PIL.ImageDraw
import os
import random
import re
import subprocess
import sys
import time
try:
    import cStringIO as StringIO
except:
    import StringIO
try:
    import numpy as np
    import scipy.interpolate
    CAN_DO_GRADIENTS=True
except:
    CAN_DO_GRADIENTS=False

if subprocess.call("which convert >/dev/null 2>&1", shell=True) == 0:
    HAS_IMAGICK = True
else:
    HAS_IMAGICK = False

try:
    import psutil
    HAS_PSUTIL = True
except:
    HAS_PSUTIL = False

def nice():
    os.nice(10)
    if HAS_PSUTIL:
        psutil.Process().ionice(psutil.IOPRIO_CLASS_IDLE)

def liquid_rescale(img, target_size):
    buf = StringIO.StringIO()
    img.save(buf, "bmp")
    imagick = subprocess.Popen(["/usr/bin/convert", "bmp:-", "-liquid-rescale", "%s!" % "x".join(map(str, target_size)), "bmp:-"], stdout=subprocess.PIPE, stdin=subprocess.PIPE, preexec_fn=nice)
    out, err = imagick.communicate(buf.getvalue())
    if err:
        print err
    return PIL.Image.open(StringIO.StringIO(out))

nice()

cachedir = os.path.expanduser("~/.cache/setbg_cinnamon/")
if not os.path.isdir(cachedir):
    os.mkdir(cachedir)

imgdir = os.path.expanduser("~/.bg/")
randr = os.popen("xrandr").read()
screens = [ [ int(x) for x in y ] for y in re.findall(" connected.* ([0-9]+)x([0-9]+)\+([0-9]+)", randr) ]

if not screens:
    sys.exit(0)

images = random.sample([ x for x in os.listdir(imgdir) if x.lower()[-3:] in ("jpg", "png") ], len(screens))

max_height = max(( x[1] for x in screens ))
total_width = max(( x[0] + x[2] for x in screens ))

output = PIL.Image.new("RGB", (total_width, max_height))
draw = PIL.ImageDraw.Draw(output)

for no in range(len(screens)):
	screen = screens[no]
        image_file = os.path.join(imgdir, images[no])
	image = PIL.Image.open(image_file)
	output_size = list(image.size)

	if output_size[0] > screen[0] and output_size[1] > screen[1]:
		if output_size[0] - screen[0] < output_size[1] - screen[1]:
			output_size[1] = output_size[1] * screen[0] / output_size[0];
			output_size[0] = screen[0]
		else:
			output_size[0] = output_size[0] * screen[1] / output_size[1];
			output_size[1] = screen[1]

        if HAS_IMAGICK and (screen[0] - 500 < output_size[0] < screen[0] - 50 or screen[1] < 500 < output_size[1] < screen[1] - 100):
            print "Screen #%d: %s %dx%d → %dx%d (Liquid scale)" % (no, images[no], image.size[0], image.size[1], screen[0], screen[1])
            if image.size[0] > screen[0] and image.size[1] > screen[1]:
                multiplier = max((screen[0] * 1. / image.size[0], screen[1] * 1. / image.size[1]))
                image = image.resize(map(int, (screen[0] * multiplier, screen[1] * multiplier)))

            cache_file = os.path.join(cachedir, "".join(("liquid_rescale", image_file.replace("/", "_").replace(" ", "_"), "_".join(map(str, screen[:2])), os.path.splitext(image_file)[-1])))
            if os.path.isfile(cache_file):
                image = PIL.Image.open(open(image_file))
            else:
                image = liquid_rescale(image, screen[:2])
                if cache_file.endswith("jpg"):
                    image.save(cache_file, quality=80)
                else:
                    image.save(cache_file)
            output_size = screen[:2]
        else:
            print "Screen #%d: %s %dx%d → %dx%d" % (no, images[no], image.size[0], image.size[1], output_size[0], output_size[1])
            image = image.resize(output_size)
	output_top = (screen[1] - output_size[1]) / 2
	output_left = (screen[0] - output_size[0]) / 2

	if output_left < 0:
		image = image.crop([ -output_left, 0, output_size[0], output_size[1]])
		output_left = 0
	if output_size[0] + output_left > screen[0]:
		image = image.crop([ 0, 0, screen[0] - output_left, image.size[1]])

        if CAN_DO_GRADIENTS:
            np_img = np.array(image)
            sample_size = int(.25 * min(np_img.shape[:2]))
            np_img = np_img[:, :, :3]
            top_left_avg = np.apply_over_axes(np.mean, np_img[:sample_size, :sample_size], [0, 1]).reshape(3)
            top_right_avg = np.apply_over_axes(np.mean, np_img[-sample_size:, :sample_size], [0, 1]).reshape(3)
            btm_left_avg = np.apply_over_axes(np.mean, np_img[:sample_size, -sample_size:], [0, 1]).reshape(3)
            btm_right_avg = np.apply_over_axes(np.mean, np_img[-sample_size:, -sample_size:], [0, 1]).reshape(3)
            interps = [ scipy.interpolate.interp2d([0, screen[0], 0, screen[0]], [0, 0, screen[1], screen[1]], [ top_left_avg[col], btm_left_avg[col], top_right_avg[col], btm_right_avg[col]]) for col in range(3) ]
            xx = np.arange(screen[0])
            yy = np.arange(screen[1])
            np_gradient = np.rollaxis(np.array([interps[col](xx, yy) for col in range(3)]), 0, 3)
            gradient = PIL.Image.fromarray(np_gradient.astype(np.uint8))
            output.paste(gradient, (screen[2], 0))
        else:
            draw.rectangle([ screen[2], 0, screen[2] + screen[0], max_height ], fill=(0, 0, 0))
	output.paste(image.resize(output_size), (screen[2] + output_left, output_top))

os.system("rm -f /tmp/setbg_cinnamon_%d_*" % os.getuid())
filename = "/tmp/setbg_cinnamon_%d_%d.png" % (os.getuid(), time.time())
output.save(filename)

os.system('dconf write "/org/cinnamon/desktop/background/picture-uri" "\'file://%s\'"' % filename)
os.system('dconf write "/org/cinnamon/desktop/background/picture-options" "\'spanned\'"')
