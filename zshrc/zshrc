# Load zgen
DISABLE_AUTO_UPDATE="true"
if [ -e "${HOME}/.zgen/init.zsh" ]; then
	ZGEN_DIR="${HOME}/.zgen"
	ZSH="${HOME}/.zgen/robbyrussell/oh-my-zsh-master"
	source "${HOME}/.zgen/init.zsh"

	autoload -U compinit
	compinit -d "${ZGEN_DIR}/zcompdump"
else
	source "${HOME}/.zsh/zgen/zgen.zsh"
	if ! zgen saved; then
		zgen oh-my-zsh
		zgen load zsh-users/zsh-syntax-highlighting
		zgen load zsh-users/zsh-completions src
		zgen load zsh-users/zsh-history-substring-search
		zgen load Tarrasch/zsh-autoenv # .autoenv.zsh USE autostash !!
		zgen load rimraf/k # k
		zgen load chrissicool/zsh-256color
		zgen oh-my-zsh themes/gentoo
		zgen load oz/safe-paste
		zgen save
	fi
fi

# bind UP and DOWN arrow keys to history search
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down

# Extended globbing
setopt extendedglob
setopt null_glob
setopt nomatch

# No history
unset HISTFILE

# Chdir stack enabled
setopt auto_name_dirs
setopt pushd_ignore_dups

# Keybindings closer to bash
bindkey -e
bindkey "^[[2~" yank                    # Insert
bindkey "^[[3~" delete-char             # Del
bindkey "^[[5~" up-line-or-history      # PageUp
bindkey "^[[6~" down-line-or-history    # PageDown
bindkey "^[e"   expand-cmd-path         # C-e for expanding path of typed command.
bindkey "^E"   expand-cmd-path         # C-e for expanding path of typed command.
bindkey "^[[A"  up-line-or-search       # Up arrow for back-history-search.
bindkey "^[[B"  down-line-or-search     # Down arrow for fwd-history-search.
bindkey " "     magic-space             # Do history expansion on space.
case "$TERM" in
        linux|screen)
                bindkey "^[[1~" beginning-of-line       # Pos1
                bindkey "^[[4~" end-of-line             # End
        ;;
        *xterm*|(dt|k)term)
                bindkey "^[OH"  beginning-of-line       # Pos1
                bindkey "^[[H"  beginning-of-line       # Pos1
                bindkey "^[OF"  end-of-line             # End
                bindkey "^[[F"  end-of-line             # End
                bindkey "^[[7~" beginning-of-line       # Pos1
                bindkey "^[[8~" end-of-line             # End
        ;;
        rxvt|Eterm)
                bindkey "^[[7~" beginning-of-line       # Pos1
                bindkey "^[[8~" end-of-line             # End
        ;;
esac

#
# Activate the local site directory
fpath=(~/.zsh/site/ $fpath)

# Activate completion
autoload -Uz compinit
compinit
compdef _unpack unpack
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
zstyle ':completion:*' menu select

# Enable correction
setopt correct

# Window title with path names
case ${TERM} in
	xterm*|rxvt*|Eterm|aterm|kterm|gnome*|interix)
		_settitle() {
			echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"
		}
		add-zsh-hook precmd _settitle
		;;
	screen)
		_settitle() {
			echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"
		}
		add-zsh-hook precmd _settitle
		;;
esac

# Enable color
alias ls="ls --color=auto -h"
export LESSCOLOR=yes

# Execute vim on ^X
export EDITOR=vim
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X' edit-command-line

# Aliases I use
alias grep="grep -i --color=auto"
alias aspell="aspell --lang DE"
alias rm="rm -i"
alias l="ls"
alias cp="cp -i"
alias mv="mv -i"
alias mysql="mysql -u root"

# Some functions
mkc() {
	local C
	C="$@"
	[[ "$C" == "" ]] && C="$(date +'%d.%m')"
	test -d "$C" || mkdir -p "$C"
	cd "$C"
}
gitup() {
	export PWD
	while [[ "$PWD" != "/" && ! -d .git ]]; do
		cd ..
	done
}
mktmp() {
	local TDIR
	TDIR=/tmp/tmp-$RANDOM
	while ! [ -d $TDIR ]; do
		mkdir -m 0711 $TDIR && break
		TDIR=/tmp/tmp-$RANDOM
	done
	echo Entering $TDIR. This directory will be deleted once you exit the subshell.
	(
		cd $TDIR
		IS_TMP_SUBSHELL=1 zsh
	)
	rm -rf $TDIR
}
if [ -n "$IS_TMP_SUBSHELL" ]; then
	export PS1="[tmp] $PS1"
	[ -e /etc/profile.d/vte.sh ] && source /etc/profile.d/vte.sh # To ensure gnome-terminal notices the new directory
	cd .
fi
mna() {
	if [ $# -ne 1 ]; then
		echo "Add mneoric for current directory"
		echo "Syntax: mna <name>"
		return
	fi
	local mneoric
	mneoric=$1
	if [ -e ~/.zsh/mneorics ] && grep -q "^${mneoric}" ~/.zsh/mneorics; then
		echo "mneoric ${mneoric} was previously assinged to $(grep "^${mneoric}" ~/.zsh/mneorics | cut -f 2)" >&2
	fi
	local OLD_CONTENTS
	OLD_CONTENTS=$([ -e ~/.zsh/mneorics ] && grep -v "^${mneoric}" ~/.zsh/mneorics)
	(
		echo "${mneoric}\t$(pwd)"
		echo $OLD_CONTENTS
	) > ~/.zsh/mneorics
}
mncd() {
	if [ $# -ne 1 ]; then
		echo "Goto directory by mneoric"
		echo "Syntax: mncd <name>"
		return
	fi
	local mneoric
	mneoric=$1
	local TARGET
	TARGET=
	if [ -e ~/.zsh/mneorics ]; then
		TARGET="$(grep "^${mneoric}" ~/.zsh/mneorics | cut -f 2)"
	fi
	if [ -z "$TARGET" ]; then
		echo "Not found: ${mneoric}" >&2
		return 1
	fi
	cd $TARGET
}

# Library directories for perl, etc.
export PERL_LOCAL_LIB_ROOT="$HOME/.local";
export PERL_MB_OPT="--install_base $HOME/.local";
export PERL_MM_OPT="INSTALL_BASE=$HOME/.local";
export PERL5LIB="$HOME/.local/lib/perl5/:$PERL5LIB";
ARCHLIB=`ls $HOME/.local/lib/perl5/ 2>/dev/null | grep -- -linux`
if [ -n $ARCHLIB ]; then
	export PERL5LIB="${ARCHLIB}:$PERL5LIB"
fi
export PATH="$HOME/.local/bin:$PATH"
if [ -z "$LD_LIBRARY_PATH" ]; then
	export LD_LIBRARY_PATH="$HOME/.local/lib"
else
	export LD_LIBRARY_PATH="$HOME/.local/lib:$LD_LIBRARY_PATH"
fi

# Change into $HOME if $PWD is /. I often work on PCs where $HOME does not exist
# before logging in, so $PWD becomes /.
if [ "$PWD" = "/" ]; then
	cd $HOME
fi

# Set the $DISPLAY variable if it is not set and the user has an open session
if [ -z "$DISPLAY" ]; then
	if which loginctl &>/dev/null; then
		LOGINCTL_SESSION=$(loginctl show-user $USER -p Display 2>/dev/null | cut -d= -f2)
		if [ -n "$LOGINCTL_SESSION" ]; then
			export DISPLAY=$(loginctl show-session $LOGINCTL_SESSION -p Display | cut -d= -f2)
		fi
	fi
	if which ck-list-sessions &>/dev/null; then
		eval `ck-list-sessions | awk "/^Session/{right=0} /unix-user = '$UID'/{right=1} /x11-display = '(.+)'/{ if(right == 1) printf(\"DISPLAY=%s\n\", \\\$3); }";`
	fi
fi

# Show a todo list after startup
if [ -e /proc/uptime ]; then
	STARTUP_UPTIME="$(cat /proc/uptime)"
	STARTUP_UPTIME="${STARTUP_UPTIME/[ .]*/}"
elif [ "${OSTYPE/[0-9.]*}" = "darwin" ]; then
	STARTUP_UPTIME="$(( $(date +%s) - $(sysctl -n kern.boottime | cut -d " " -f4 | tr -d ",") ))"
fi

if ! [ $HOME/.zsh/.todo_zsh_timestamp(ms-$STARTUP_UPTIME) ]; then
	touch $HOME/.zsh/.todo_zsh_timestamp
	todo -i
fi

# Execute other scripts
if [ -d $HOME/.zsh/scripts/ ]; then
	for SCRIPT in $HOME/.zsh/scripts/*(.x,@x); do
		source $SCRIPT
	done
fi
