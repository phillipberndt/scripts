#!/usr/bin/python3
#
# A simple tool to prove a "git add -p" experience, but for "patch"
#
import collections
import os
import subprocess
import sys
import tempfile

Hunk = collections.namedtuple("Hunk", "old_file old_timestamp new_file new_timestamp old_start_line old_length new_start_line new_length context diff")

def split_into_hunks(patch, relax_length=False):
    """Split a unified format patch into hunks"""
    patch = patch.splitlines()
    # Strip preamble, if any
    while not patch[0].startswith("---"):
        patch.pop(0)
    if not patch:
        raise ValueError("Expecting a patch in unified format")
    while patch:
        # New file, parse header
        if patch[0][0] == "-":
            old_file, new_file, *patch = patch
            assert new_file.startswith("+++")
            new_file = new_file[4:]
            old_file = old_file[4:]
            if "\t" in old_file:
                old_file, old_timestamp = old_file.split("\t")
            else:
                old_timestamp = None
            if "\t" in new_file:
                new_file, new_timestamp = new_file.split("\t")
            else:
                new_timestamp = None
        # Parse another hunk
        # Hunk header
        hunk, *patch = patch
        assert hunk.startswith("@@")
        _1, old, new, *context = hunk.split()
        assert context[0].startswith("@@")
        context = " ".join(context[1:])
        assert old.startswith("-")
        assert new.startswith("+")
        old_start_line, old_length = map(int, old[1:].split(","))
        new_start_line, new_length = map(int, new[1:].split(","))
        # Hunk data
        hunk_data = []
        old_actual_length = 0
        new_actual_length = 0
        while patch and patch[0] and patch[0][0] in " +-#":
            line, *patch = patch
            if line[0] == "#":
                continue
            hunk_data.append(line)
            if line[0] in (" ", "-"):
                old_actual_length += 1
            if line[0] in (" ", "+"):
                new_actual_length += 1
        if not relax_length:
            assert old_length == old_actual_length
            assert new_length == new_actual_length
        diff = hunk_data
        yield Hunk(old_file, old_timestamp, new_file, new_timestamp, old_start_line, old_actual_length, new_start_line, new_actual_length, context, diff)


def format_hunk(hunk, colorize=False):
    out = []
    if colorize:
        out.append(f"\033[31m--- {hunk.old_file}{chr(9) if hunk.old_timestamp else ''}{hunk.old_timestamp}\033[0m")
        out.append(f"\033[32m+++ {hunk.new_file}{chr(9) if hunk.new_timestamp else ''}{hunk.new_timestamp}\033[0m")
        out.append(f"\033[36,1m@@ -{hunk.old_start_line},{hunk.old_length} +{hunk.new_start_line},{hunk.new_length} @@{' ' if hunk.context else ''}{hunk.context}\033[0m")
        for line in hunk.diff:
            if line.startswith("+"):
                out.append(f"\033[32m{line}\033[0m")
            elif line.startswith("-"):
                out.append(f"\033[31m{line}\033[0m")
            else:
                out.append(line)
    else:
        out.append(f"--- {hunk.old_file}{chr(9) if hunk.old_timestamp else ''}{hunk.old_timestamp}")
        out.append(f"+++ {hunk.new_file}{chr(9) if hunk.new_timestamp else ''}{hunk.new_timestamp}")
        out.append(f"@@ -{hunk.old_start_line},{hunk.old_length} +{hunk.new_start_line},{hunk.new_length} @@{' ' if hunk.context else ''}{hunk.context}")
        for line in hunk.diff:
            out.append(line)
    out.append("")
    return "\n".join(out)


def main(argv):
    try:
        *args, patch_file = argv[1:]
    except ValueError:
        print("ipatch - Interactively apply patches, like `git add -p'", file=sys.stderr)
        print("Syntax: ipatch [patch arguments] <patch file>", file=sys.stderr)
        sys.exit(1)
    if patch_file == "-":
        patch_file_contents = sys.stdin.read()
    else:
        patch_file_contents = open(patch_file).read()

    hunks = split_into_hunks(patch_file_contents)
    apply_all = False
    previous_file = None
    for hunk in hunks:
        # If the file changed, reset the line number shift
        current_file = hunk.old_file
        if previous_file != current_file:
            shift = 0
            previous_file = current_file
        # Shift line number references
        hunk = hunk._replace(old_start_line=hunk.old_start_line + shift, new_start_line=hunk.new_start_line + shift)
        # Compute by how much this patch will shift line numbers in later hunks
        hunk_shift = hunk.new_length - hunk.old_length
        # Print the patch
        print(format_hunk(hunk, True))
        # Ask for which action to take
        while not apply_all:
            action = input("\033[1;36mApply this hunk [y,n,q,a,d,e,?]?\033[0m ")
            if action in "ynqade":
                break
            if action == "?":
                print("y - Apply this hunk")
                print("n - do not apply this hunk")
                print("q - quit; do not apply this hunk or any of the remaining ones")
                print("a - apply this hunk and all later hunks")
                print("e - manually edit the current hunk")
        # Take the action
        if action in ("y", "a"):
            # Apply the patch
            encoded_hunk = format_hunk(hunk, False).encode()
            subprocess.run(["patch", "--dry-run", *args], input=encoded_hunk, check=True)
            subprocess.run(["patch", *args], input=encoded_hunk, check=True)
            shift += hunk_shift
            if action == "a":
                apply_all = True
        elif action == "q":
            break
        elif action == "e":
            # Edit the patch
            while True:
                hunk_file = tempfile.NamedTemporaryFile(mode="w+")
                hunk_file.write("# Manual hunk edit mode -- see bottom for a quick guide.\n")
                text_hunk = format_hunk(hunk, False)
                hunk_file.write(text_hunk)
                hunk_file.write("\n".join(("", "# ---", "# To remove '-' lines, make them ' ' lines (context).",
                                          "# To remove '+' lines, delete them.", "# Lines starting with # will be removed,",
                                          "# If the patch applies cleanly, the edited hunk will immediately be applied.",
                                          "# If it does not apply cleanly, you will be given an opportunity to",
                                          "# edit again.  If all lines of the hunk are removed, then the edit is",
                                          "# aborted and the hunk is left unchanged.",)))
                hunk_file.flush()
                subprocess.run([os.environ.get("EDITOR", "vim"), hunk_file.name])
                hunk_file.seek(0)
                updated_hunk = hunk_file.read()
                if not updated_hunk:
                    break

                parsed_updated_hunk = next(split_into_hunks(updated_hunk, relax_length=True))
                if not any((l.startswith(("+", "-")) for l in parsed_updated_hunk.diff)):
                    updated_hunk = None
                    break
                hunk_shift = parsed_updated_hunk.new_length - parsed_updated_hunk.old_length
                encoded_updated_hunk = format_hunk(parsed_updated_hunk, False).encode()

                # Test if the hunk applies
                if subprocess.run(["patch", "--dry-run", *args], input=encoded_updated_hunk).returncode == 0:
                    break
                input("Press <enter> to try again")
            if updated_hunk:
                # Apply the patch
                subprocess.run(["patch", *args], input=encoded_updated_hunk, check=True)
                shift += hunk_shift


if __name__ == "__main__":
    main(sys.argv)
